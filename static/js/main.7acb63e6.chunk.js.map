{"version":3,"sources":["store/reducers/stock.js","store/reducers/index.js","store/actions/types.js","store/index.js","pages/app.js","services/constants.js","store/actions/stock.js","serviceWorker.js","index.js"],"names":["initialState","stocks","combineReducers","stock","state","action","type","middleware","thunk","store","createStore","rootReducer","applyMiddleware","App","renderStocks","props","console","log","map","item","index","key","name","className","gain","scope","price","moment","updated_at","fromNow","this","initializeSocket","socket","WebSocket","addEventListener","updateStockMarket","error","Component","connect","res","dispatch","getState","slice","JSON","parse","data","forEach","findIndex","Date","now","push","created_at","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"kVAEMA,EAAe,CACjBC,OAAQ,ICAGC,cAAgB,CAC3BC,MDEW,WAAmC,IAAlCC,EAAiC,uDAAzBJ,EAAcK,EAAW,uCAC7C,OAAQA,EAAOC,MACX,IERoB,eFShB,OAAO,2BACAF,GADP,IAEIH,OAAQI,EAAOJ,SAEvB,QACI,OAAOG,MGPbG,EAAa,CAACC,KAMpB,IAEeC,EAFDC,YAAYC,EAPL,GAOgCC,IAAe,WAAf,EAAmBL,ICNlEM,G,kNAsBLC,aAAe,WAAO,IACbb,EAAW,EAAKc,MAAhBd,OAGR,OAFAe,QAAQC,IAAI,WAAYhB,GAEjBA,EAAOiB,KAAI,SAACC,EAAMC,GACxB,OACC,wBAAIC,IAAKF,EAAKG,KAAOF,EAAOG,UAAWJ,EAAKK,KAAOL,EAAKK,KAAO,EAAI,aAAe,aAAe,IAChG,wBAAIC,MAAM,OAAOL,EAAQ,GACzB,4BAAKD,EAAKG,MACV,4BAAKH,EAAKO,OACV,4BAAKC,IAAOR,EAAKS,YAAYC,gB,kEA7BhCC,KAAKC,qB,yCAIL,IAAMC,EAAS,IAAIC,UCdS,4BDiB5BD,EAAOE,iBAAiB,UAAWJ,KAAKf,MAAMoB,mBAG9CH,EAAOE,iBAAiB,SAAS,SAACE,GACjCpB,QAAQC,IAAI,uBAAwBmB,Q,+EAyBrC,OACC,yBAAKb,UAAU,OACd,yBAAKA,UAAU,aACd,yBAAKA,UAAU,OACd,yBAAKA,UAAU,QACd,wDAGF,yBAAKA,UAAU,OACd,yBAAKA,UAAU,OACd,yBAAKA,UAAU,QACd,2BAAOA,UAAU,wBAChB,+BACC,4BACC,wBAAIE,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,UACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,kBAGF,+BACEK,KAAKhB,0B,GA5DEuB,cA4EHC,eAJS,SAAClC,GAAD,MAAY,CACnCH,OAAQG,EAAMD,MAAMF,UAGmB,CAAEkC,kBEhFT,SAACI,GAAD,OAAS,SAAAC,GAEtC,IAAMvC,EAASQ,EAAMgC,WAAWtC,MAAMF,OAAOyC,QAE7CC,KAAKC,MAAML,EAAIM,MAAMC,SAAQ,YAAoB,IAAD,mBAAjBxB,EAAiB,KAAXI,EAAW,KACtCN,EAAQnB,EAAO8C,WAAU,SAAA5B,GAAI,OAAIA,EAAKG,OAASA,MACtC,IAAXF,GACAnB,EAAOmB,GAAP,KAAwBnB,EAAOmB,GAAP,MAAyBM,EACjDzB,EAAOmB,GAAP,MAAyBM,EACzBzB,EAAOmB,GAAP,KAAwBE,EACxBrB,EAAOmB,GAAP,WAA8B4B,KAAKC,OAGnChD,EAAOiD,KAAK,CAAE5B,KAAMA,EAAMI,MAAOA,EAAOyB,WAAYH,KAAKC,MAAOrB,WAAYoB,KAAKC,WAIzFT,EAAS,CAAElC,KJpBa,eIoBOL,OAAQA,OF+D5BqC,CAAgDzB,GGvE3CuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUlD,MAAOA,GACb,kBAAC,EAAD,QAGRmD,SAASC,eAAe,SDqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLpB,QAAQoB,MAAMA,EAAMiC,c","file":"static/js/main.7acb63e6.chunk.js","sourcesContent":["import { UPDATE_STOCK } from '../actions/types'\r\n\r\nconst initialState = {\r\n    stocks: []\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_STOCK:\r\n            return {\r\n                ...state,\r\n                stocks: action.stocks\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport Stock from './stock';\r\n\r\nexport default combineReducers({\r\n    stock: Stock\r\n})\r\n","export const UPDATE_STOCK = 'UPDATE_STOCK'","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    middleware.push(logger);\r\n}\r\n\r\nconst store = createStore(rootReducer, initialState, applyMiddleware(...middleware));\r\n\r\nexport default store;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport { STOCK_ENDPOINT } from '../services/constants';\nimport { updateStockMarket } from '../store/actions/stock';\nimport './style.css';\n\nclass App extends Component {\n\n\tcomponentDidMount() {\n\t\tthis.initializeSocket()\n\t}\n\n\tinitializeSocket() {\n\t\tconst socket = new WebSocket(STOCK_ENDPOINT);\n\n\t\t// Listen for messages\n\t\tsocket.addEventListener('message', this.props.updateStockMarket);\n\n\t\t// Listen for error\n\t\tsocket.addEventListener('error', (error) => {\n\t\t\tconsole.log('Something went wrong', error);\n\t\t});\n\t}\n\n\tcomponentWillUnmount() {\n\t\t\n\t}\n\n\trenderStocks = () => {\n\t\tconst { stocks } = this.props;\n\t\tconsole.log('stocks: ', stocks);\n\n\t\treturn stocks.map((item, index) => {\n\t\t\treturn (\n\t\t\t\t<tr key={item.name + index} className={item.gain ? item.gain > 0 ? 'stock-gain' : 'stock-loss' : ''}>\n\t\t\t\t\t<th scope=\"row\">{index + 1}</th>\n\t\t\t\t\t<td>{item.name}</td>\n\t\t\t\t\t<td>{item.price}</td>\n\t\t\t\t\t<td>{moment(item.updated_at).fromNow()}</td>\n\t\t\t\t</tr>\n\t\t\t)\n\t\t})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"app\">\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"py-3\">\n\t\t\t\t\t\t\t<h2>Stock Market App(Live)</h2>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col\">\n\t\t\t\t\t\t\t<div className=\"py-5\">\n\t\t\t\t\t\t\t\t<table className=\"table table-bordered\">\n\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">#</th>\n\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">Ticker</th>\n\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">Price</th>\n\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">Last Updated</th>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t{this.renderStocks()}\n\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = (state) => ({\n\tstocks: state.stock.stocks\n})\n\nexport default connect(mapStateToProps, { updateStockMarket })(App);\n","export const STOCK_ENDPOINT = \"ws://stocks.mnet.website\";","import { UPDATE_STOCK } from './types';\r\nimport store from '..';\r\n\r\nexport const updateStockMarket = (res) => dispatch => {\r\n\r\n    const stocks = store.getState().stock.stocks.slice();\r\n\r\n    JSON.parse(res.data).forEach(([name, price]) => {\r\n        const index = stocks.findIndex(item => item.name === name);\r\n        if (index !== -1) {\r\n            stocks[index]['gain'] = stocks[index]['price'] - price;\r\n            stocks[index]['price'] = price;\r\n            stocks[index]['name'] = name;\r\n            stocks[index]['updated_at'] = Date.now();\r\n        }\r\n        else {\r\n            stocks.push({ name: name, price: price, created_at: Date.now(), updated_at: Date.now() })\r\n        }\r\n    });\r\n    \r\n    dispatch({ type: UPDATE_STOCK, stocks: stocks })\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './pages/app';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}